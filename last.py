# -*- coding: utf-8 -*-
"""last.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b-SCBtgvslGQ9SaFQ_haz6E3253z3gwQ
"""

# ==============================
# 1. Kütüphaneler
# ==============================
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer

from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import Lasso
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score

import joblib

# ==============================
# 2. Veri Yükleme
# ==============================
#df = pd.read_csv("./data/House_Rent_Dataset.csv")
df = pd.read_csv("./data/en_data.csv")
# print(df.head()

#df = df.drop(columns=["Tenant Preferred", "Point of Contact", "Furnishing Status"])
#print(df.head())

# 500.000 üzeri kira değerlerinin sayısı
count_over_500k = (df["Rent"] > 500_000).sum()
count_over_500k

df = df[df["Rent"] <= 500_000]

# 50.000 altındaki kira değerlerinin sayısı
count_under_50k = (df["Rent"] < 500_000).sum()
count_under_50k

# 500.000 üzeri kira değerlerinin sayısı
count_over_500k = (df["Rent"] > 500_000).sum()
count_over_500k

# ==============================
# 3. Aykırı Değer Temizleme (Outlier Removal)
# ==============================
# Rent ve Size'da uç değerleri kaldır
q1, q3 = df['Rent'].quantile([0.01, 0.99])
df = df[(df['Rent'] >= q1) & (df['Rent'] <= q3)]

q1_size, q3_size = df['Size'].quantile([0.01, 0.97])
df = df[(df['Size'] >= q1_size) & (df['Size'] <= q3_size)]

# ==============================
# 4. Hedef ve Features
# ==============================
target = "Rent"
X = df.drop(columns=[target])
y = df[target]

# Log-transform ile daha stabil tahmin
y = np.log1p(y)  # log(1 + Rent)

# ==============================
# 5. Sayısal ve Kategorik Kolonlar
# ==============================
num_features = X.select_dtypes(include=["int64", "float64"]).columns
cat_features = X.select_dtypes(include=["object"]).columns

# ==============================
# 6. Preprocessing
# ==============================
num_transformer = Pipeline([
    # ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', StandardScaler())
])

cat_transformer = Pipeline([
    # ('imputer', SimpleImputer(strategy='most_frequent')),
    ('encoder', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer([
    ('num', num_transformer, num_features),
    ('cat', cat_transformer, cat_features)
])

# ==============================
# 7. Train-Test Split
# ==============================
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# RandomForestRegressor
param_grid = {
    'regressor__n_estimators': [100, 200],
    'regressor__max_depth': [None, 10, 20],
    'regressor__min_samples_split': [2, 5, 10]
}

# LASSO
param_grid = {
    'regressor__alpha': [0.001, 0.01, 0.1, 1, 10]
}

# GradientBoostingRegressor
param_grid = {
    'regressor__n_estimators': [100, 200],
    'regressor__max_depth': [None, 10, 20],
    'regressor__min_samples_split': [2, 5, 10]
}

# ==============================
# 8. Model + Hyperparameter Tuning
# ==============================
rf = RandomForestRegressor(random_state=42)
lasso = Lasso(random_state=42)
gbr = GradientBoostingRegressor(random_state=42)


model = Pipeline([
    ('preprocessor', preprocessor),
    ('regressor', rf)
])

grid_search = GridSearchCV(
    model, param_grid, cv=3, n_jobs=-1, scoring='r2', verbose=2
)
grid_search.fit(X_train, y_train)

print("Best Parameters:", grid_search.best_params_)



# ==============================
# 9. Tahmin ve Değerlendirme
# ==============================
y_pred = grid_search.predict(X_test)

# Log-transform geri çevir
y_test_exp = np.expm1(y_test)
y_pred_exp = np.expm1(y_pred)

print("R2 Score:", r2_score(y_test_exp, y_pred_exp))
print("RMSE:", np.sqrt(mean_squared_error(y_test_exp, y_pred_exp)))

# Scatter plot
plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test_exp, y=y_pred_exp)
plt.xlabel("Actual Rent")
plt.ylabel("Predicted Rent")
plt.title("Gerçek vs Tahmin Kira Fiyatları (Log-transform ile)")
plt.plot([y_test_exp.min(), y_test_exp.max()], [y_test_exp.min(), y_test_exp.max()], 'r--')
plt.show()


# ==============================
# 10. Model Kaydetme
# ==============================
joblib.dump(grid_search.best_estimator_, "house_rent_model_optimized.pkl")

